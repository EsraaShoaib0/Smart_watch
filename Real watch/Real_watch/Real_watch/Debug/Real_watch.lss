
Real_watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000a12  00000aa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006a  0080006a  00000ab0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001428  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6d  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000edb  00000000  00000000  00002ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  000039b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c2  00000000  00000000  00003c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000093c  00000000  00000000  0000411e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004a5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 be 04 	jmp	0x97c	; 0x97c <__vector_9>
  28:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_10>
  2c:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <main>
  8a:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KEYPAD_init>:
 '1', '2', '3', '-',
 'c', '0', '=', '+'
};
// PD0 to PD3 input pull up, PD4 to PD7 output
void KEYPAD_init(void){
	INIT_KEYPAD_PIN;
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	8a bb       	out	0x1a, r24	; 26
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	8b bb       	out	0x1b, r24	; 27
  9a:	08 95       	ret

0000009c <KEYPAD_read>:
  
}
uint8_t KEYPAD_read(void){
	K4(0); K5(1); K6(1); K7(1);
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	8f 7e       	andi	r24, 0xEF	; 239
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	8b b3       	in	r24, 0x1b	; 27
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8b bb       	out	0x1b, r24	; 27
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	8b bb       	out	0x1b, r24	; 27
	if(K0 == 0) return keypad_matrix[0];
  b4:	c8 9b       	sbis	0x19, 0	; 25
  b6:	5c c0       	rjmp	.+184    	; 0x170 <KEYPAD_read+0xd4>
	if(K1 == 0) return keypad_matrix[4];
  b8:	c9 9b       	sbis	0x19, 1	; 25
  ba:	5c c0       	rjmp	.+184    	; 0x174 <KEYPAD_read+0xd8>
	if(K2 == 0) return keypad_matrix[8];
  bc:	ca 9b       	sbis	0x19, 2	; 25
  be:	5c c0       	rjmp	.+184    	; 0x178 <KEYPAD_read+0xdc>
	if(K3 == 0) return keypad_matrix[12];
  c0:	cb 9b       	sbis	0x19, 3	; 25
  c2:	5c c0       	rjmp	.+184    	; 0x17c <KEYPAD_read+0xe0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <KEYPAD_read+0x2c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <KEYPAD_read+0x32>
  ce:	00 00       	nop
	_delay_ms(1);
	
	K4(1); K5(0); K6(1); K7(1);
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8f 7d       	andi	r24, 0xDF	; 223
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	8b b3       	in	r24, 0x1b	; 27
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	8b b3       	in	r24, 0x1b	; 27
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8b bb       	out	0x1b, r24	; 27
	if(K0 == 0) return keypad_matrix[1];
  e8:	c8 9b       	sbis	0x19, 0	; 25
  ea:	4a c0       	rjmp	.+148    	; 0x180 <KEYPAD_read+0xe4>
	if(K1 == 0) return keypad_matrix[5];
  ec:	c9 9b       	sbis	0x19, 1	; 25
  ee:	4a c0       	rjmp	.+148    	; 0x184 <KEYPAD_read+0xe8>
	if(K2 == 0) return keypad_matrix[9];
  f0:	ca 9b       	sbis	0x19, 2	; 25
  f2:	4a c0       	rjmp	.+148    	; 0x188 <KEYPAD_read+0xec>
	if(K3 == 0) return keypad_matrix[13];
  f4:	cb 9b       	sbis	0x19, 3	; 25
  f6:	4a c0       	rjmp	.+148    	; 0x18c <KEYPAD_read+0xf0>
  f8:	8f e9       	ldi	r24, 0x9F	; 159
  fa:	9f e0       	ldi	r25, 0x0F	; 15
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <KEYPAD_read+0x60>
 100:	00 c0       	rjmp	.+0      	; 0x102 <KEYPAD_read+0x66>
 102:	00 00       	nop
	_delay_ms(1);
	
	K4(1); K5(1); K6(0); K7(1);
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	80 61       	ori	r24, 0x10	; 16
 108:	8b bb       	out	0x1b, r24	; 27
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	8b bb       	out	0x1b, r24	; 27
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	8b bb       	out	0x1b, r24	; 27
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8b bb       	out	0x1b, r24	; 27
	if(K0 == 0) return keypad_matrix[2];
 11c:	c8 9b       	sbis	0x19, 0	; 25
 11e:	38 c0       	rjmp	.+112    	; 0x190 <KEYPAD_read+0xf4>
	if(K1 == 0) return keypad_matrix[6];
 120:	c9 9b       	sbis	0x19, 1	; 25
 122:	38 c0       	rjmp	.+112    	; 0x194 <KEYPAD_read+0xf8>
	if(K2 == 0) return keypad_matrix[10];
 124:	ca 9b       	sbis	0x19, 2	; 25
 126:	38 c0       	rjmp	.+112    	; 0x198 <KEYPAD_read+0xfc>
	if(K3 == 0) return keypad_matrix[14];
 128:	cb 9b       	sbis	0x19, 3	; 25
 12a:	38 c0       	rjmp	.+112    	; 0x19c <KEYPAD_read+0x100>
 12c:	8f e9       	ldi	r24, 0x9F	; 159
 12e:	9f e0       	ldi	r25, 0x0F	; 15
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <KEYPAD_read+0x94>
 134:	00 c0       	rjmp	.+0      	; 0x136 <KEYPAD_read+0x9a>
 136:	00 00       	nop
	_delay_ms(1);
	
	K4(1); K5(1); K6(1); K7(0);
 138:	8b b3       	in	r24, 0x1b	; 27
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	8b bb       	out	0x1b, r24	; 27
 13e:	8b b3       	in	r24, 0x1b	; 27
 140:	80 62       	ori	r24, 0x20	; 32
 142:	8b bb       	out	0x1b, r24	; 27
 144:	8b b3       	in	r24, 0x1b	; 27
 146:	80 64       	ori	r24, 0x40	; 64
 148:	8b bb       	out	0x1b, r24	; 27
 14a:	8b b3       	in	r24, 0x1b	; 27
 14c:	8f 77       	andi	r24, 0x7F	; 127
 14e:	8b bb       	out	0x1b, r24	; 27
	if(K0 == 0) return keypad_matrix[3];
 150:	c8 9b       	sbis	0x19, 0	; 25
 152:	26 c0       	rjmp	.+76     	; 0x1a0 <KEYPAD_read+0x104>
	if(K1 == 0) return keypad_matrix[7];
 154:	c9 9b       	sbis	0x19, 1	; 25
 156:	26 c0       	rjmp	.+76     	; 0x1a4 <KEYPAD_read+0x108>
	if(K2 == 0) return keypad_matrix[11];
 158:	ca 9b       	sbis	0x19, 2	; 25
 15a:	26 c0       	rjmp	.+76     	; 0x1a8 <KEYPAD_read+0x10c>
	if(K3 == 0) return keypad_matrix[15];
 15c:	cb 9b       	sbis	0x19, 3	; 25
 15e:	26 c0       	rjmp	.+76     	; 0x1ac <KEYPAD_read+0x110>
 160:	8f e9       	ldi	r24, 0x9F	; 159
 162:	9f e0       	ldi	r25, 0x0F	; 15
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <KEYPAD_read+0xc8>
 168:	00 c0       	rjmp	.+0      	; 0x16a <KEYPAD_read+0xce>
 16a:	00 00       	nop
	_delay_ms(1);
	
	
	return 0;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
	INIT_KEYPAD_PIN;
  
}
uint8_t KEYPAD_read(void){
	K4(0); K5(1); K6(1); K7(1);
	if(K0 == 0) return keypad_matrix[0];
 170:	87 e3       	ldi	r24, 0x37	; 55
 172:	08 95       	ret
	if(K1 == 0) return keypad_matrix[4];
 174:	84 e3       	ldi	r24, 0x34	; 52
 176:	08 95       	ret
	if(K2 == 0) return keypad_matrix[8];
 178:	81 e3       	ldi	r24, 0x31	; 49
 17a:	08 95       	ret
	if(K3 == 0) return keypad_matrix[12];
 17c:	83 e6       	ldi	r24, 0x63	; 99
 17e:	08 95       	ret
	_delay_ms(1);
	
	K4(1); K5(0); K6(1); K7(1);
	if(K0 == 0) return keypad_matrix[1];
 180:	88 e3       	ldi	r24, 0x38	; 56
 182:	08 95       	ret
	if(K1 == 0) return keypad_matrix[5];
 184:	85 e3       	ldi	r24, 0x35	; 53
 186:	08 95       	ret
	if(K2 == 0) return keypad_matrix[9];
 188:	82 e3       	ldi	r24, 0x32	; 50
 18a:	08 95       	ret
	if(K3 == 0) return keypad_matrix[13];
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	08 95       	ret
	_delay_ms(1);
	
	K4(1); K5(1); K6(0); K7(1);
	if(K0 == 0) return keypad_matrix[2];
 190:	89 e3       	ldi	r24, 0x39	; 57
 192:	08 95       	ret
	if(K1 == 0) return keypad_matrix[6];
 194:	86 e3       	ldi	r24, 0x36	; 54
 196:	08 95       	ret
	if(K2 == 0) return keypad_matrix[10];
 198:	83 e3       	ldi	r24, 0x33	; 51
 19a:	08 95       	ret
	if(K3 == 0) return keypad_matrix[14];
 19c:	8d e3       	ldi	r24, 0x3D	; 61
 19e:	08 95       	ret
	_delay_ms(1);
	
	K4(1); K5(1); K6(1); K7(0);
	if(K0 == 0) return keypad_matrix[3];
 1a0:	8f e2       	ldi	r24, 0x2F	; 47
 1a2:	08 95       	ret
	if(K1 == 0) return keypad_matrix[7];
 1a4:	8a e2       	ldi	r24, 0x2A	; 42
 1a6:	08 95       	ret
	if(K2 == 0) return keypad_matrix[11];
 1a8:	8d e2       	ldi	r24, 0x2D	; 45
 1aa:	08 95       	ret
	if(K3 == 0) return keypad_matrix[15];
 1ac:	8b e2       	ldi	r24, 0x2B	; 43
	_delay_ms(1);
	
	
	return 0;
 1ae:	08 95       	ret

000001b0 <LCD_write_command>:
	uint8_t i =0;
	while(data[i] != '\0'){
		LCD_write_data(data[i]);
		i++;
	}
}
 1b0:	98 b3       	in	r25, 0x18	; 24
 1b2:	97 7f       	andi	r25, 0xF7	; 247
 1b4:	98 bb       	out	0x18, r25	; 24
 1b6:	88 23       	and	r24, r24
 1b8:	24 f4       	brge	.+8      	; 0x1c2 <LCD_write_command+0x12>
 1ba:	98 b3       	in	r25, 0x18	; 24
 1bc:	90 68       	ori	r25, 0x80	; 128
 1be:	98 bb       	out	0x18, r25	; 24
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <LCD_write_command+0x18>
 1c2:	98 b3       	in	r25, 0x18	; 24
 1c4:	9f 77       	andi	r25, 0x7F	; 127
 1c6:	98 bb       	out	0x18, r25	; 24
 1c8:	86 ff       	sbrs	r24, 6
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <LCD_write_command+0x24>
 1cc:	98 b3       	in	r25, 0x18	; 24
 1ce:	90 64       	ori	r25, 0x40	; 64
 1d0:	98 bb       	out	0x18, r25	; 24
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <LCD_write_command+0x2a>
 1d4:	98 b3       	in	r25, 0x18	; 24
 1d6:	9f 7b       	andi	r25, 0xBF	; 191
 1d8:	98 bb       	out	0x18, r25	; 24
 1da:	85 ff       	sbrs	r24, 5
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <LCD_write_command+0x36>
 1de:	98 b3       	in	r25, 0x18	; 24
 1e0:	90 62       	ori	r25, 0x20	; 32
 1e2:	98 bb       	out	0x18, r25	; 24
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <LCD_write_command+0x3c>
 1e6:	98 b3       	in	r25, 0x18	; 24
 1e8:	9f 7d       	andi	r25, 0xDF	; 223
 1ea:	98 bb       	out	0x18, r25	; 24
 1ec:	84 ff       	sbrs	r24, 4
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <LCD_write_command+0x48>
 1f0:	98 b3       	in	r25, 0x18	; 24
 1f2:	90 61       	ori	r25, 0x10	; 16
 1f4:	98 bb       	out	0x18, r25	; 24
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <LCD_write_command+0x4e>
 1f8:	98 b3       	in	r25, 0x18	; 24
 1fa:	9f 7e       	andi	r25, 0xEF	; 239
 1fc:	98 bb       	out	0x18, r25	; 24
 1fe:	98 b3       	in	r25, 0x18	; 24
 200:	94 60       	ori	r25, 0x04	; 4
 202:	98 bb       	out	0x18, r25	; 24
 204:	ef e9       	ldi	r30, 0x9F	; 159
 206:	ff e0       	ldi	r31, 0x0F	; 15
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_write_command+0x58>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_write_command+0x5e>
 20e:	00 00       	nop
 210:	98 b3       	in	r25, 0x18	; 24
 212:	9b 7f       	andi	r25, 0xFB	; 251
 214:	98 bb       	out	0x18, r25	; 24
 216:	ef e9       	ldi	r30, 0x9F	; 159
 218:	ff e0       	ldi	r31, 0x0F	; 15
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_write_command+0x6a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_write_command+0x70>
 220:	00 00       	nop
 222:	83 ff       	sbrs	r24, 3
 224:	04 c0       	rjmp	.+8      	; 0x22e <LCD_write_command+0x7e>
 226:	98 b3       	in	r25, 0x18	; 24
 228:	90 68       	ori	r25, 0x80	; 128
 22a:	98 bb       	out	0x18, r25	; 24
 22c:	03 c0       	rjmp	.+6      	; 0x234 <LCD_write_command+0x84>
 22e:	98 b3       	in	r25, 0x18	; 24
 230:	9f 77       	andi	r25, 0x7F	; 127
 232:	98 bb       	out	0x18, r25	; 24
 234:	82 ff       	sbrs	r24, 2
 236:	04 c0       	rjmp	.+8      	; 0x240 <LCD_write_command+0x90>
 238:	98 b3       	in	r25, 0x18	; 24
 23a:	90 64       	ori	r25, 0x40	; 64
 23c:	98 bb       	out	0x18, r25	; 24
 23e:	03 c0       	rjmp	.+6      	; 0x246 <LCD_write_command+0x96>
 240:	98 b3       	in	r25, 0x18	; 24
 242:	9f 7b       	andi	r25, 0xBF	; 191
 244:	98 bb       	out	0x18, r25	; 24
 246:	81 ff       	sbrs	r24, 1
 248:	04 c0       	rjmp	.+8      	; 0x252 <LCD_write_command+0xa2>
 24a:	98 b3       	in	r25, 0x18	; 24
 24c:	90 62       	ori	r25, 0x20	; 32
 24e:	98 bb       	out	0x18, r25	; 24
 250:	03 c0       	rjmp	.+6      	; 0x258 <LCD_write_command+0xa8>
 252:	98 b3       	in	r25, 0x18	; 24
 254:	9f 7d       	andi	r25, 0xDF	; 223
 256:	98 bb       	out	0x18, r25	; 24
 258:	80 ff       	sbrs	r24, 0
 25a:	04 c0       	rjmp	.+8      	; 0x264 <LCD_write_command+0xb4>
 25c:	88 b3       	in	r24, 0x18	; 24
 25e:	80 61       	ori	r24, 0x10	; 16
 260:	88 bb       	out	0x18, r24	; 24
 262:	03 c0       	rjmp	.+6      	; 0x26a <LCD_write_command+0xba>
 264:	88 b3       	in	r24, 0x18	; 24
 266:	8f 7e       	andi	r24, 0xEF	; 239
 268:	88 bb       	out	0x18, r24	; 24
 26a:	88 b3       	in	r24, 0x18	; 24
 26c:	84 60       	ori	r24, 0x04	; 4
 26e:	88 bb       	out	0x18, r24	; 24
 270:	8f e9       	ldi	r24, 0x9F	; 159
 272:	9f e0       	ldi	r25, 0x0F	; 15
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_write_command+0xc4>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_write_command+0xca>
 27a:	00 00       	nop
 27c:	88 b3       	in	r24, 0x18	; 24
 27e:	8b 7f       	andi	r24, 0xFB	; 251
 280:	88 bb       	out	0x18, r24	; 24
 282:	ef e9       	ldi	r30, 0x9F	; 159
 284:	ff e0       	ldi	r31, 0x0F	; 15
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_write_command+0xd6>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_write_command+0xdc>
 28c:	00 00       	nop
 28e:	08 95       	ret

00000290 <LCD_init>:
 290:	87 b3       	in	r24, 0x17	; 23
 292:	8c 6f       	ori	r24, 0xFC	; 252
 294:	87 bb       	out	0x17, r24	; 23
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
 29c:	8f e7       	ldi	r24, 0x7F	; 127
 29e:	9e e3       	ldi	r25, 0x3E	; 62
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCD_init+0x10>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <LCD_init+0x16>
 2a6:	00 00       	nop
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
 2ae:	8f e7       	ldi	r24, 0x7F	; 127
 2b0:	9e e3       	ldi	r25, 0x3E	; 62
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_init+0x22>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_init+0x28>
 2b8:	00 00       	nop
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
 2c0:	8f e7       	ldi	r24, 0x7F	; 127
 2c2:	9e e3       	ldi	r25, 0x3E	; 62
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_init+0x34>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_init+0x3a>
 2ca:	00 00       	nop
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
 2d2:	88 e2       	ldi	r24, 0x28	; 40
 2d4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
 2d8:	88 e0       	ldi	r24, 0x08	; 8
 2da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
 2e4:	86 e0       	ldi	r24, 0x06	; 6
 2e6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
 2ea:	8c e0       	ldi	r24, 0x0C	; 12
 2ec:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
 2f0:	9f ef       	ldi	r25, 0xFF	; 255
 2f2:	29 ef       	ldi	r18, 0xF9	; 249
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	91 50       	subi	r25, 0x01	; 1
 2f8:	20 40       	sbci	r18, 0x00	; 0
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <LCD_init+0x66>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_init+0x70>
 300:	00 00       	nop
 302:	08 95       	ret

00000304 <LCD_write_data>:
 304:	98 b3       	in	r25, 0x18	; 24
 306:	98 60       	ori	r25, 0x08	; 8
 308:	98 bb       	out	0x18, r25	; 24
 30a:	88 23       	and	r24, r24
 30c:	24 f4       	brge	.+8      	; 0x316 <LCD_write_data+0x12>
 30e:	98 b3       	in	r25, 0x18	; 24
 310:	90 68       	ori	r25, 0x80	; 128
 312:	98 bb       	out	0x18, r25	; 24
 314:	03 c0       	rjmp	.+6      	; 0x31c <LCD_write_data+0x18>
 316:	98 b3       	in	r25, 0x18	; 24
 318:	9f 77       	andi	r25, 0x7F	; 127
 31a:	98 bb       	out	0x18, r25	; 24
 31c:	86 ff       	sbrs	r24, 6
 31e:	04 c0       	rjmp	.+8      	; 0x328 <LCD_write_data+0x24>
 320:	98 b3       	in	r25, 0x18	; 24
 322:	90 64       	ori	r25, 0x40	; 64
 324:	98 bb       	out	0x18, r25	; 24
 326:	03 c0       	rjmp	.+6      	; 0x32e <LCD_write_data+0x2a>
 328:	98 b3       	in	r25, 0x18	; 24
 32a:	9f 7b       	andi	r25, 0xBF	; 191
 32c:	98 bb       	out	0x18, r25	; 24
 32e:	85 ff       	sbrs	r24, 5
 330:	04 c0       	rjmp	.+8      	; 0x33a <LCD_write_data+0x36>
 332:	98 b3       	in	r25, 0x18	; 24
 334:	90 62       	ori	r25, 0x20	; 32
 336:	98 bb       	out	0x18, r25	; 24
 338:	03 c0       	rjmp	.+6      	; 0x340 <LCD_write_data+0x3c>
 33a:	98 b3       	in	r25, 0x18	; 24
 33c:	9f 7d       	andi	r25, 0xDF	; 223
 33e:	98 bb       	out	0x18, r25	; 24
 340:	84 ff       	sbrs	r24, 4
 342:	04 c0       	rjmp	.+8      	; 0x34c <LCD_write_data+0x48>
 344:	98 b3       	in	r25, 0x18	; 24
 346:	90 61       	ori	r25, 0x10	; 16
 348:	98 bb       	out	0x18, r25	; 24
 34a:	03 c0       	rjmp	.+6      	; 0x352 <LCD_write_data+0x4e>
 34c:	98 b3       	in	r25, 0x18	; 24
 34e:	9f 7e       	andi	r25, 0xEF	; 239
 350:	98 bb       	out	0x18, r25	; 24
 352:	98 b3       	in	r25, 0x18	; 24
 354:	94 60       	ori	r25, 0x04	; 4
 356:	98 bb       	out	0x18, r25	; 24
 358:	ef e9       	ldi	r30, 0x9F	; 159
 35a:	ff e0       	ldi	r31, 0x0F	; 15
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_write_data+0x58>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_write_data+0x5e>
 362:	00 00       	nop
 364:	98 b3       	in	r25, 0x18	; 24
 366:	9b 7f       	andi	r25, 0xFB	; 251
 368:	98 bb       	out	0x18, r25	; 24
 36a:	ef e9       	ldi	r30, 0x9F	; 159
 36c:	ff e0       	ldi	r31, 0x0F	; 15
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCD_write_data+0x6a>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_write_data+0x70>
 374:	00 00       	nop
 376:	83 ff       	sbrs	r24, 3
 378:	04 c0       	rjmp	.+8      	; 0x382 <LCD_write_data+0x7e>
 37a:	98 b3       	in	r25, 0x18	; 24
 37c:	90 68       	ori	r25, 0x80	; 128
 37e:	98 bb       	out	0x18, r25	; 24
 380:	03 c0       	rjmp	.+6      	; 0x388 <LCD_write_data+0x84>
 382:	98 b3       	in	r25, 0x18	; 24
 384:	9f 77       	andi	r25, 0x7F	; 127
 386:	98 bb       	out	0x18, r25	; 24
 388:	82 ff       	sbrs	r24, 2
 38a:	04 c0       	rjmp	.+8      	; 0x394 <LCD_write_data+0x90>
 38c:	98 b3       	in	r25, 0x18	; 24
 38e:	90 64       	ori	r25, 0x40	; 64
 390:	98 bb       	out	0x18, r25	; 24
 392:	03 c0       	rjmp	.+6      	; 0x39a <LCD_write_data+0x96>
 394:	98 b3       	in	r25, 0x18	; 24
 396:	9f 7b       	andi	r25, 0xBF	; 191
 398:	98 bb       	out	0x18, r25	; 24
 39a:	81 ff       	sbrs	r24, 1
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <LCD_write_data+0xa2>
 39e:	98 b3       	in	r25, 0x18	; 24
 3a0:	90 62       	ori	r25, 0x20	; 32
 3a2:	98 bb       	out	0x18, r25	; 24
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <LCD_write_data+0xa8>
 3a6:	98 b3       	in	r25, 0x18	; 24
 3a8:	9f 7d       	andi	r25, 0xDF	; 223
 3aa:	98 bb       	out	0x18, r25	; 24
 3ac:	80 ff       	sbrs	r24, 0
 3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <LCD_write_data+0xb4>
 3b0:	88 b3       	in	r24, 0x18	; 24
 3b2:	80 61       	ori	r24, 0x10	; 16
 3b4:	88 bb       	out	0x18, r24	; 24
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <LCD_write_data+0xba>
 3b8:	88 b3       	in	r24, 0x18	; 24
 3ba:	8f 7e       	andi	r24, 0xEF	; 239
 3bc:	88 bb       	out	0x18, r24	; 24
 3be:	88 b3       	in	r24, 0x18	; 24
 3c0:	84 60       	ori	r24, 0x04	; 4
 3c2:	88 bb       	out	0x18, r24	; 24
 3c4:	8f e9       	ldi	r24, 0x9F	; 159
 3c6:	9f e0       	ldi	r25, 0x0F	; 15
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <LCD_write_data+0xc4>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <LCD_write_data+0xca>
 3ce:	00 00       	nop
 3d0:	88 b3       	in	r24, 0x18	; 24
 3d2:	8b 7f       	andi	r24, 0xFB	; 251
 3d4:	88 bb       	out	0x18, r24	; 24
 3d6:	ef e9       	ldi	r30, 0x9F	; 159
 3d8:	ff e0       	ldi	r31, 0x0F	; 15
 3da:	31 97       	sbiw	r30, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <LCD_write_data+0xd6>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_write_data+0xdc>
 3e0:	00 00       	nop
 3e2:	08 95       	ret

000003e4 <LCD_write_number>:
* Parameters   : *data: any integer number
* Return value : void
*****************************************************************************/

void LCD_write_number(uint32_t data)
{
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	2a 97       	sbiw	r28, 0x0a	; 10
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
	if (data == 0)
 3fa:	61 15       	cp	r22, r1
 3fc:	71 05       	cpc	r23, r1
 3fe:	81 05       	cpc	r24, r1
 400:	91 05       	cpc	r25, r1
 402:	d1 f4       	brne	.+52     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
	{
		LCD_write_data('0');
 404:	80 e3       	ldi	r24, 0x30	; 48
 406:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
 40a:	2c c0       	rjmp	.+88     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	}
	uint8_t arr[10];			//array that contain the Ascii of the numbers
	int8_t i;
	for (i = 0;data!=0;i++)
	{
		arr[i]= data%10+48;    //write the Ascii of the number inside the array
 40c:	2a e0       	ldi	r18, 0x0A	; 10
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__udivmodsi4>
 418:	e1 e0       	ldi	r30, 0x01	; 1
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	ec 0f       	add	r30, r28
 41e:	fd 1f       	adc	r31, r29
 420:	e1 0f       	add	r30, r17
 422:	f1 1d       	adc	r31, r1
 424:	17 fd       	sbrc	r17, 7
 426:	fa 95       	dec	r31
 428:	60 5d       	subi	r22, 0xD0	; 208
 42a:	60 83       	st	Z, r22
		data = data/10	;	// to get into next number
 42c:	62 2f       	mov	r22, r18
 42e:	73 2f       	mov	r23, r19
 430:	84 2f       	mov	r24, r20
 432:	95 2f       	mov	r25, r21
		LCD_write_data('0');
		return;
	}
	uint8_t arr[10];			//array that contain the Ascii of the numbers
	int8_t i;
	for (i = 0;data!=0;i++)
 434:	1f 5f       	subi	r17, 0xFF	; 255
 436:	01 c0       	rjmp	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	61 15       	cp	r22, r1
 43c:	71 05       	cpc	r23, r1
 43e:	81 05       	cpc	r24, r1
 440:	91 05       	cpc	r25, r1
 442:	21 f7       	brne	.-56     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	{
		arr[i]= data%10+48;    //write the Ascii of the number inside the array
		data = data/10	;	// to get into next number
	}
	i--;
 444:	11 50       	subi	r17, 0x01	; 1
	while(i>=0)
 446:	0c c0       	rjmp	.+24     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
	{
	LCD_write_data(arr[i]);	
 448:	e1 e0       	ldi	r30, 0x01	; 1
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	ec 0f       	add	r30, r28
 44e:	fd 1f       	adc	r31, r29
 450:	e1 0f       	add	r30, r17
 452:	f1 1d       	adc	r31, r1
 454:	17 fd       	sbrc	r17, 7
 456:	fa 95       	dec	r31
 458:	80 81       	ld	r24, Z
 45a:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
	i--;
 45e:	11 50       	subi	r17, 0x01	; 1
	{
		arr[i]= data%10+48;    //write the Ascii of the number inside the array
		data = data/10	;	// to get into next number
	}
	i--;
	while(i>=0)
 460:	11 23       	and	r17, r17
 462:	94 f7       	brge	.-28     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
	{
	LCD_write_data(arr[i]);	
	i--;
	}
}
 464:	2a 96       	adiw	r28, 0x0a	; 10
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	1f 91       	pop	r17
 476:	08 95       	ret

00000478 <ctc1_isr>:
	}
    }
}
static void ctc1_isr(void){
	static uint8_t c = 0;
	if (clock_on == 0)
 478:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <clock_on>
 47c:	81 11       	cpse	r24, r1
 47e:	22 c0       	rjmp	.+68     	; 0x4c4 <ctc1_isr+0x4c>
	{
		c++;
 480:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 484:	8f 5f       	subi	r24, 0xFF	; 255
 486:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
		if (c==4)
 48a:	84 30       	cpi	r24, 0x04	; 4
 48c:	d9 f4       	brne	.+54     	; 0x4c4 <ctc1_isr+0x4c>
		{
			c =0;
 48e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
			s++;
 492:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <s>
 496:	8f 5f       	subi	r24, 0xFF	; 255
 498:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <s>
			if (s== 60)
 49c:	8c 33       	cpi	r24, 0x3C	; 60
 49e:	39 f4       	brne	.+14     	; 0x4ae <ctc1_isr+0x36>
			{
				m++;
 4a0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <m>
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <m>
				s=0;
 4aa:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <s>
			}
			if (m == 60)
 4ae:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <m>
 4b2:	8c 33       	cpi	r24, 0x3C	; 60
 4b4:	39 f4       	brne	.+14     	; 0x4c4 <ctc1_isr+0x4c>
			{
				h++;
 4b6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <h>
 4ba:	8f 5f       	subi	r24, 0xFF	; 255
 4bc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <h>
				m=0;
 4c0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <m>
 4c4:	08 95       	ret

000004c6 <ctc_isr>:
}
static void ctc_isr(void){
	
	
	
		if (on == 1)
 4c6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <on>
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	91 f4       	brne	.+36     	; 0x4f2 <ctc_isr+0x2c>
		{
			SEVEN_SEG_write(s%10,1);
 4ce:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <s>
 4d2:	9d ec       	ldi	r25, 0xCD	; 205
 4d4:	89 9f       	mul	r24, r25
 4d6:	91 2d       	mov	r25, r1
 4d8:	11 24       	eor	r1, r1
 4da:	96 95       	lsr	r25
 4dc:	96 95       	lsr	r25
 4de:	96 95       	lsr	r25
 4e0:	99 0f       	add	r25, r25
 4e2:	29 2f       	mov	r18, r25
 4e4:	22 0f       	add	r18, r18
 4e6:	22 0f       	add	r18, r18
 4e8:	92 0f       	add	r25, r18
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	89 1b       	sub	r24, r25
 4ee:	0e 94 21 04 	call	0x842	; 0x842 <SEVEN_SEG_write>
		}
		if (on == 2)
 4f2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <on>
 4f6:	82 30       	cpi	r24, 0x02	; 2
 4f8:	61 f4       	brne	.+24     	; 0x512 <ctc_isr+0x4c>
		{
			SEVEN_SEG_write(s/10,2);
 4fa:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <s>
 4fe:	9d ec       	ldi	r25, 0xCD	; 205
 500:	89 9f       	mul	r24, r25
 502:	81 2d       	mov	r24, r1
 504:	11 24       	eor	r1, r1
 506:	62 e0       	ldi	r22, 0x02	; 2
 508:	86 95       	lsr	r24
 50a:	86 95       	lsr	r24
 50c:	86 95       	lsr	r24
 50e:	0e 94 21 04 	call	0x842	; 0x842 <SEVEN_SEG_write>
		}
		if (on == 3)
 512:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <on>
 516:	83 30       	cpi	r24, 0x03	; 3
 518:	91 f4       	brne	.+36     	; 0x53e <ctc_isr+0x78>
		{
			SEVEN_SEG_write(m%10,3);
 51a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <m>
 51e:	9d ec       	ldi	r25, 0xCD	; 205
 520:	89 9f       	mul	r24, r25
 522:	91 2d       	mov	r25, r1
 524:	11 24       	eor	r1, r1
 526:	96 95       	lsr	r25
 528:	96 95       	lsr	r25
 52a:	96 95       	lsr	r25
 52c:	99 0f       	add	r25, r25
 52e:	29 2f       	mov	r18, r25
 530:	22 0f       	add	r18, r18
 532:	22 0f       	add	r18, r18
 534:	92 0f       	add	r25, r18
 536:	63 e0       	ldi	r22, 0x03	; 3
 538:	89 1b       	sub	r24, r25
 53a:	0e 94 21 04 	call	0x842	; 0x842 <SEVEN_SEG_write>
		}
		if (on == 4)
 53e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <on>
 542:	84 30       	cpi	r24, 0x04	; 4
 544:	61 f4       	brne	.+24     	; 0x55e <ctc_isr+0x98>
		{
			SEVEN_SEG_write(m/10,4);
 546:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <m>
 54a:	9d ec       	ldi	r25, 0xCD	; 205
 54c:	89 9f       	mul	r24, r25
 54e:	81 2d       	mov	r24, r1
 550:	11 24       	eor	r1, r1
 552:	64 e0       	ldi	r22, 0x04	; 4
 554:	86 95       	lsr	r24
 556:	86 95       	lsr	r24
 558:	86 95       	lsr	r24
 55a:	0e 94 21 04 	call	0x842	; 0x842 <SEVEN_SEG_write>
		}
		if (on == 5)
 55e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <on>
 562:	85 30       	cpi	r24, 0x05	; 5
 564:	91 f4       	brne	.+36     	; 0x58a <ctc_isr+0xc4>
		{
			SEVEN_SEG_write(h%10,5);
 566:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <h>
 56a:	9d ec       	ldi	r25, 0xCD	; 205
 56c:	89 9f       	mul	r24, r25
 56e:	91 2d       	mov	r25, r1
 570:	11 24       	eor	r1, r1
 572:	96 95       	lsr	r25
 574:	96 95       	lsr	r25
 576:	96 95       	lsr	r25
 578:	99 0f       	add	r25, r25
 57a:	29 2f       	mov	r18, r25
 57c:	22 0f       	add	r18, r18
 57e:	22 0f       	add	r18, r18
 580:	92 0f       	add	r25, r18
 582:	65 e0       	ldi	r22, 0x05	; 5
 584:	89 1b       	sub	r24, r25
 586:	0e 94 21 04 	call	0x842	; 0x842 <SEVEN_SEG_write>
		}
		if (on == 6)
 58a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <on>
 58e:	86 30       	cpi	r24, 0x06	; 6
 590:	61 f4       	brne	.+24     	; 0x5aa <ctc_isr+0xe4>
		{
			SEVEN_SEG_write(h/10,6);
 592:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <h>
 596:	9d ec       	ldi	r25, 0xCD	; 205
 598:	89 9f       	mul	r24, r25
 59a:	81 2d       	mov	r24, r1
 59c:	11 24       	eor	r1, r1
 59e:	66 e0       	ldi	r22, 0x06	; 6
 5a0:	86 95       	lsr	r24
 5a2:	86 95       	lsr	r24
 5a4:	86 95       	lsr	r24
 5a6:	0e 94 21 04 	call	0x842	; 0x842 <SEVEN_SEG_write>
		}
		if (on == 7)
 5aa:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <on>
 5ae:	87 30       	cpi	r24, 0x07	; 7
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <ctc_isr+0xf0>
		{
			on = 0;
 5b2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <on>
		}
		on++;
 5b6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <on>
 5ba:	8f 5f       	subi	r24, 0xFF	; 255
 5bc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <on>
 5c0:	08 95       	ret

000005c2 <main>:
uint8_t clock_on = 0;
int main(void)
{
  // clock_init();
  // SETBIT(DDRA,0);
     SEVEN_SEG_init();
 5c2:	0e 94 1a 04 	call	0x834	; 0x834 <SEVEN_SEG_init>
   timer1_ctc_isr = ctc1_isr;
 5c6:	8c e3       	ldi	r24, 0x3C	; 60
 5c8:	92 e0       	ldi	r25, 0x02	; 2
 5ca:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <timer1_ctc_isr+0x1>
 5ce:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <timer1_ctc_isr>
   TIMER1_CTC_init();
 5d2:	0e 94 b1 04 	call	0x962	; 0x962 <TIMER1_CTC_init>
   timer0_ctc_isr = ctc_isr;
 5d6:	83 e6       	ldi	r24, 0x63	; 99
 5d8:	92 e0       	ldi	r25, 0x02	; 2
 5da:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <timer0_ctc_isr+0x1>
 5de:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <timer0_ctc_isr>
   TIMER0_CTC_init(16);
 5e2:	80 e1       	ldi	r24, 0x10	; 16
 5e4:	0e 94 4f 04 	call	0x89e	; 0x89e <TIMER0_CTC_init>
   KEYPAD_init();
 5e8:	0e 94 49 00 	call	0x92	; 0x92 <KEYPAD_init>
    /* Replace with your application code */
	LCD_init();
 5ec:	0e 94 48 01 	call	0x290	; 0x290 <LCD_init>
    while (1) 
    {
		if (clock_on == 0)
 5f0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <clock_on>
 5f4:	81 11       	cpse	r24, r1
 5f6:	34 c0       	rjmp	.+104    	; 0x660 <main+0x9e>
	{
		//clock(h,m,s);
		LCD_write_command(0x80);
 5f8:	80 e8       	ldi	r24, 0x80	; 128
 5fa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
		LCD_write_number(h);
 5fe:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <h>
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
		LCD_write_data(':');
 60c:	8a e3       	ldi	r24, 0x3A	; 58
 60e:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
		LCD_write_number(m);
 612:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <m>
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
		LCD_write_data(':');
 620:	8a e3       	ldi	r24, 0x3A	; 58
 622:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
		LCD_write_number(s);
 626:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <s>
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
		//
		change = KEYPAD_read();
 634:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 638:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <change>
		if (change == 'c')
 63c:	83 36       	cpi	r24, 0x63	; 99
 63e:	c1 f6       	brne	.-80     	; 0x5f0 <main+0x2e>
 640:	8f e9       	ldi	r24, 0x9F	; 159
 642:	9f e0       	ldi	r25, 0x0F	; 15
 644:	01 97       	sbiw	r24, 0x01	; 1
 646:	f1 f7       	brne	.-4      	; 0x644 <main+0x82>
 648:	00 c0       	rjmp	.+0      	; 0x64a <main+0x88>
 64a:	00 00       	nop
		{
			_delay_ms(1);
			while(change == KEYPAD_read());
 64c:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 650:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <change>
 654:	89 17       	cp	r24, r25
 656:	d1 f3       	breq	.-12     	; 0x64c <main+0x8a>
			clock_on = 1;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <clock_on>
 65e:	c8 cf       	rjmp	.-112    	; 0x5f0 <main+0x2e>
		//LCD_write_command(0x01);	
		}
		//
	}
	else{
		operation = KEYPAD_read();
 660:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 664:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <operation>
		while(operation == KEYPAD_read());
 668:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 66c:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <operation>
 670:	89 17       	cp	r24, r25
 672:	d1 f3       	breq	.-12     	; 0x668 <main+0xa6>
		if (operation !=0)
 674:	99 23       	and	r25, r25
 676:	09 f4       	brne	.+2      	; 0x67a <main+0xb8>
 678:	bb cf       	rjmp	.-138    	; 0x5f0 <main+0x2e>
		{
			
			if (operation == '+')
 67a:	9b 32       	cpi	r25, 0x2B	; 43
 67c:	61 f5       	brne	.+88     	; 0x6d6 <main+0x114>
			{
				while(operation == KEYPAD_read());
 67e:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 682:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <operation>
 686:	89 17       	cp	r24, r25
 688:	d1 f3       	breq	.-12     	; 0x67e <main+0xbc>
				m++;
 68a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <m>
 68e:	8f 5f       	subi	r24, 0xFF	; 255
 690:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <m>
				s=0;
 694:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <s>
				LCD_write_command(0x80);
 698:	80 e8       	ldi	r24, 0x80	; 128
 69a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
				LCD_write_number(h);
 69e:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <h>
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
				LCD_write_data(':');
 6ac:	8a e3       	ldi	r24, 0x3A	; 58
 6ae:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
				LCD_write_number(m);
 6b2:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <m>
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
				LCD_write_data(':');
 6c0:	8a e3       	ldi	r24, 0x3A	; 58
 6c2:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
				LCD_write_number(s);
 6c6:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <s>
 6ca:	70 e0       	ldi	r23, 0x00	; 0
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
 6d4:	8d cf       	rjmp	.-230    	; 0x5f0 <main+0x2e>
			}
			else if (operation == '-')			
 6d6:	9d 32       	cpi	r25, 0x2D	; 45
 6d8:	61 f5       	brne	.+88     	; 0x732 <main+0x170>
			{
				while(operation == KEYPAD_read());
 6da:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 6de:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <operation>
 6e2:	89 17       	cp	r24, r25
 6e4:	d1 f3       	breq	.-12     	; 0x6da <main+0x118>
				m--;
 6e6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <m>
 6ea:	81 50       	subi	r24, 0x01	; 1
 6ec:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <m>
				s=0;
 6f0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <s>
				LCD_write_command(0x80);
 6f4:	80 e8       	ldi	r24, 0x80	; 128
 6f6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
				LCD_write_number(h);
 6fa:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <h>
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
				LCD_write_data(':');
 708:	8a e3       	ldi	r24, 0x3A	; 58
 70a:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
				LCD_write_number(m);
 70e:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <m>
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
				LCD_write_data(':');
 71c:	8a e3       	ldi	r24, 0x3A	; 58
 71e:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
				LCD_write_number(s);
 722:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <s>
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
 730:	5f cf       	rjmp	.-322    	; 0x5f0 <main+0x2e>
			}
			else if (operation == 'c')
 732:	93 36       	cpi	r25, 0x63	; 99
 734:	09 f0       	breq	.+2      	; 0x738 <main+0x176>
 736:	5c cf       	rjmp	.-328    	; 0x5f0 <main+0x2e>
 738:	77 c0       	rjmp	.+238    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			{			
				while (clock_on == 1)
				{
					operation = KEYPAD_read();
 73a:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 73e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <operation>
					if (operation !=0)
 742:	88 23       	and	r24, r24
 744:	09 f4       	brne	.+2      	; 0x748 <main+0x186>
 746:	70 c0       	rjmp	.+224    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
					{
						operation = KEYPAD_read();
 748:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 74c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <operation>
						while(operation == KEYPAD_read());
 750:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 754:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <operation>
 758:	89 17       	cp	r24, r25
 75a:	d1 f3       	breq	.-12     	; 0x750 <main+0x18e>
						//while(operation == KEYPAD_read());
						if (operation == '+')
 75c:	9b 32       	cpi	r25, 0x2B	; 43
 75e:	61 f5       	brne	.+88     	; 0x7b8 <main+0x1f6>
						{
							while(operation == KEYPAD_read());
 760:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 764:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <operation>
 768:	89 17       	cp	r24, r25
 76a:	d1 f3       	breq	.-12     	; 0x760 <main+0x19e>
							h++;
 76c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <h>
 770:	8f 5f       	subi	r24, 0xFF	; 255
 772:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <h>
							s=0;
 776:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <s>
							LCD_write_command(0x80);
 77a:	80 e8       	ldi	r24, 0x80	; 128
 77c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
							LCD_write_number(h);
 780:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <h>
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
							LCD_write_data(':');
 78e:	8a e3       	ldi	r24, 0x3A	; 58
 790:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
							LCD_write_number(m);
 794:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <m>
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
							LCD_write_data(':');
 7a2:	8a e3       	ldi	r24, 0x3A	; 58
 7a4:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
							LCD_write_number(s);
 7a8:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <s>
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
 7b6:	38 c0       	rjmp	.+112    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
						}
						else if (operation == '-')
 7b8:	9d 32       	cpi	r25, 0x2D	; 45
 7ba:	61 f5       	brne	.+88     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
						{
							while(operation == KEYPAD_read());
 7bc:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 7c0:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <operation>
 7c4:	89 17       	cp	r24, r25
 7c6:	d1 f3       	breq	.-12     	; 0x7bc <main+0x1fa>
							h--;
 7c8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <h>
 7cc:	81 50       	subi	r24, 0x01	; 1
 7ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <h>
							s=0;
 7d2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <s>
							LCD_write_command(0x80);
 7d6:	80 e8       	ldi	r24, 0x80	; 128
 7d8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_command>
							LCD_write_number(h);
 7dc:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <h>
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
							LCD_write_data(':');
 7ea:	8a e3       	ldi	r24, 0x3A	; 58
 7ec:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
							LCD_write_number(m);
 7f0:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <m>
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
							LCD_write_data(':');
 7fe:	8a e3       	ldi	r24, 0x3A	; 58
 800:	0e 94 82 01 	call	0x304	; 0x304 <LCD_write_data>
							LCD_write_number(s);
 804:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <s>
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_write_number>
 812:	0a c0       	rjmp	.+20     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
						}
						else if (operation == 'c')
 814:	93 36       	cpi	r25, 0x63	; 99
 816:	41 f4       	brne	.+16     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
						{
							while(operation == KEYPAD_read());
 818:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_read>
 81c:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <operation>
 820:	89 17       	cp	r24, r25
 822:	d1 f3       	breq	.-12     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
							clock_on =0;
 824:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <clock_on>
				LCD_write_data(':');
				LCD_write_number(s);
			}
			else if (operation == 'c')
			{			
				while (clock_on == 1)
 828:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <clock_on>
 82c:	81 30       	cpi	r24, 0x01	; 1
 82e:	09 f4       	brne	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 830:	84 cf       	rjmp	.-248    	; 0x73a <main+0x178>
 832:	de ce       	rjmp	.-580    	; 0x5f0 <main+0x2e>

00000834 <SEVEN_SEG_init>:
 */ 
#include "SEVEN_SEG.h"
uint8_t numbers [10] = {0b111111,0b110,0b1011011,0b1001111,0b1100110,0b1101101,0b1111101,0b111,0b1111111,0b1101111};

void SEVEN_SEG_init(void){
	INIT_SEVEN_SEG_PINS
 834:	84 b3       	in	r24, 0x14	; 20
 836:	8f 67       	ori	r24, 0x7F	; 127
 838:	84 bb       	out	0x14, r24	; 20
 83a:	81 b3       	in	r24, 0x11	; 17
 83c:	8f ef       	ldi	r24, 0xFF	; 255
 83e:	81 bb       	out	0x11, r24	; 17
 840:	08 95       	ret

00000842 <SEVEN_SEG_write>:
}
void SEVEN_SEG_write(uint8_t data , uint8_t num){
	 
	 DISABLE_ALL_7S
 842:	9f ef       	ldi	r25, 0xFF	; 255
 844:	92 bb       	out	0x12, r25	; 18
	 switch(num){
 846:	63 30       	cpi	r22, 0x03	; 3
 848:	a1 f0       	breq	.+40     	; 0x872 <__stack+0x13>
 84a:	28 f4       	brcc	.+10     	; 0x856 <SEVEN_SEG_write+0x14>
 84c:	61 30       	cpi	r22, 0x01	; 1
 84e:	49 f0       	breq	.+18     	; 0x862 <__stack+0x3>
 850:	62 30       	cpi	r22, 0x02	; 2
 852:	59 f0       	breq	.+22     	; 0x86a <__stack+0xb>
 854:	1d c0       	rjmp	.+58     	; 0x890 <__stack+0x31>
 856:	65 30       	cpi	r22, 0x05	; 5
 858:	a1 f0       	breq	.+40     	; 0x882 <__stack+0x23>
 85a:	78 f0       	brcs	.+30     	; 0x87a <__stack+0x1b>
 85c:	66 30       	cpi	r22, 0x06	; 6
 85e:	a9 f0       	breq	.+42     	; 0x88a <__stack+0x2b>
 860:	17 c0       	rjmp	.+46     	; 0x890 <__stack+0x31>
		 case 1: E1 break;
 862:	92 b3       	in	r25, 0x12	; 18
 864:	9d 7f       	andi	r25, 0xFD	; 253
 866:	92 bb       	out	0x12, r25	; 18
 868:	13 c0       	rjmp	.+38     	; 0x890 <__stack+0x31>
		 case 2: E2 break;
 86a:	92 b3       	in	r25, 0x12	; 18
 86c:	9b 7f       	andi	r25, 0xFB	; 251
 86e:	92 bb       	out	0x12, r25	; 18
 870:	0f c0       	rjmp	.+30     	; 0x890 <__stack+0x31>
		 case 3: E3 break;
 872:	92 b3       	in	r25, 0x12	; 18
 874:	97 7f       	andi	r25, 0xF7	; 247
 876:	92 bb       	out	0x12, r25	; 18
 878:	0b c0       	rjmp	.+22     	; 0x890 <__stack+0x31>
		 case 4: E4 break;
 87a:	92 b3       	in	r25, 0x12	; 18
 87c:	9f 7e       	andi	r25, 0xEF	; 239
 87e:	92 bb       	out	0x12, r25	; 18
 880:	07 c0       	rjmp	.+14     	; 0x890 <__stack+0x31>
		 case 5: E5 break;
 882:	92 b3       	in	r25, 0x12	; 18
 884:	9f 7d       	andi	r25, 0xDF	; 223
 886:	92 bb       	out	0x12, r25	; 18
 888:	03 c0       	rjmp	.+6      	; 0x890 <__stack+0x31>
		 case 6: E6 break;
 88a:	92 b3       	in	r25, 0x12	; 18
 88c:	9f 7b       	andi	r25, 0xBF	; 191
 88e:	92 bb       	out	0x12, r25	; 18
	 }
	 PORT_WRITE = numbers[data];
 890:	e8 2f       	mov	r30, r24
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	e0 5a       	subi	r30, 0xA0	; 160
 896:	ff 4f       	sbci	r31, 0xFF	; 255
 898:	80 81       	ld	r24, Z
 89a:	85 bb       	out	0x15, r24	; 21
 89c:	08 95       	ret

0000089e <TIMER0_CTC_init>:
	SETBIT(DDRB, 3); // set OC0 as output
	SETBIT(TCCR0,CS00); // PRESCALER
	SETBIT(TCCR0,FOC0);
	SETBIT(TCCR0,WGM01); // CTC
	SETBIT(TCCR0,COM00);
	OCR0 = oc;
 89e:	93 b7       	in	r25, 0x33	; 51
 8a0:	91 60       	ori	r25, 0x01	; 1
 8a2:	93 bf       	out	0x33, r25	; 51
 8a4:	93 b7       	in	r25, 0x33	; 51
 8a6:	94 60       	ori	r25, 0x04	; 4
 8a8:	93 bf       	out	0x33, r25	; 51
 8aa:	93 b7       	in	r25, 0x33	; 51
 8ac:	90 68       	ori	r25, 0x80	; 128
 8ae:	93 bf       	out	0x33, r25	; 51
 8b0:	93 b7       	in	r25, 0x33	; 51
 8b2:	98 60       	ori	r25, 0x08	; 8
 8b4:	93 bf       	out	0x33, r25	; 51
 8b6:	8c bf       	out	0x3c, r24	; 60
 8b8:	89 b7       	in	r24, 0x39	; 57
 8ba:	82 60       	ori	r24, 0x02	; 2
 8bc:	89 bf       	out	0x39, r24	; 57
 8be:	8f b7       	in	r24, 0x3f	; 63
 8c0:	80 68       	ori	r24, 0x80	; 128
 8c2:	8f bf       	out	0x3f, r24	; 63
 8c4:	08 95       	ret

000008c6 <__vector_11>:
}

ISR(TIMER0_OVF_vect){
 8c6:	1f 92       	push	r1
 8c8:	0f 92       	push	r0
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	0f 92       	push	r0
 8ce:	11 24       	eor	r1, r1
 8d0:	2f 93       	push	r18
 8d2:	3f 93       	push	r19
 8d4:	4f 93       	push	r20
 8d6:	5f 93       	push	r21
 8d8:	6f 93       	push	r22
 8da:	7f 93       	push	r23
 8dc:	8f 93       	push	r24
 8de:	9f 93       	push	r25
 8e0:	af 93       	push	r26
 8e2:	bf 93       	push	r27
 8e4:	ef 93       	push	r30
 8e6:	ff 93       	push	r31
	timer0_ovf_isr();
 8e8:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <timer0_ovf_isr>
 8ec:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <timer0_ovf_isr+0x1>
 8f0:	09 95       	icall
}
 8f2:	ff 91       	pop	r31
 8f4:	ef 91       	pop	r30
 8f6:	bf 91       	pop	r27
 8f8:	af 91       	pop	r26
 8fa:	9f 91       	pop	r25
 8fc:	8f 91       	pop	r24
 8fe:	7f 91       	pop	r23
 900:	6f 91       	pop	r22
 902:	5f 91       	pop	r21
 904:	4f 91       	pop	r20
 906:	3f 91       	pop	r19
 908:	2f 91       	pop	r18
 90a:	0f 90       	pop	r0
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	0f 90       	pop	r0
 910:	1f 90       	pop	r1
 912:	18 95       	reti

00000914 <__vector_10>:

ISR(TIMER0_COMP_vect){
 914:	1f 92       	push	r1
 916:	0f 92       	push	r0
 918:	0f b6       	in	r0, 0x3f	; 63
 91a:	0f 92       	push	r0
 91c:	11 24       	eor	r1, r1
 91e:	2f 93       	push	r18
 920:	3f 93       	push	r19
 922:	4f 93       	push	r20
 924:	5f 93       	push	r21
 926:	6f 93       	push	r22
 928:	7f 93       	push	r23
 92a:	8f 93       	push	r24
 92c:	9f 93       	push	r25
 92e:	af 93       	push	r26
 930:	bf 93       	push	r27
 932:	ef 93       	push	r30
 934:	ff 93       	push	r31
	timer0_ctc_isr();
 936:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <timer0_ctc_isr>
 93a:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <timer0_ctc_isr+0x1>
 93e:	09 95       	icall
 940:	ff 91       	pop	r31
 942:	ef 91       	pop	r30
 944:	bf 91       	pop	r27
 946:	af 91       	pop	r26
 948:	9f 91       	pop	r25
 94a:	8f 91       	pop	r24
 94c:	7f 91       	pop	r23
 94e:	6f 91       	pop	r22
 950:	5f 91       	pop	r21
 952:	4f 91       	pop	r20
 954:	3f 91       	pop	r19
 956:	2f 91       	pop	r18
 958:	0f 90       	pop	r0
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	0f 90       	pop	r0
 95e:	1f 90       	pop	r1
 960:	18 95       	reti

00000962 <TIMER1_CTC_init>:
#include "TIMER1.h"
void (*timer1_ctc_isr)(void);

void TIMER1_CTC_init(/*uint32_t oc*/)
{
	SETBIT(TCCR1B,CS10); // PRESCALER
 962:	8e b5       	in	r24, 0x2e	; 46
 964:	81 60       	ori	r24, 0x01	; 1
 966:	8e bd       	out	0x2e, r24	; 46
	SETBIT(TCCR1B,CS11); // PRESCALER
 968:	8e b5       	in	r24, 0x2e	; 46
 96a:	82 60       	ori	r24, 0x02	; 2
 96c:	8e bd       	out	0x2e, r24	; 46
	//SETBIT(TCCR1A,FOC1A);
	//SETBIT(TCCR1A,WGM12); // CTC
	SETBIT(TIMSK,TOIE1); // enable timer ctc interrupt
 96e:	89 b7       	in	r24, 0x39	; 57
 970:	84 60       	ori	r24, 0x04	; 4
 972:	89 bf       	out	0x39, r24	; 57
	SETBIT(SREG, 7); // enable global interrupt
 974:	8f b7       	in	r24, 0x3f	; 63
 976:	80 68       	ori	r24, 0x80	; 128
 978:	8f bf       	out	0x3f, r24	; 63
 97a:	08 95       	ret

0000097c <__vector_9>:
}
ISR(TIMER1_OVF_vect){
 97c:	1f 92       	push	r1
 97e:	0f 92       	push	r0
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	0f 92       	push	r0
 984:	11 24       	eor	r1, r1
 986:	2f 93       	push	r18
 988:	3f 93       	push	r19
 98a:	4f 93       	push	r20
 98c:	5f 93       	push	r21
 98e:	6f 93       	push	r22
 990:	7f 93       	push	r23
 992:	8f 93       	push	r24
 994:	9f 93       	push	r25
 996:	af 93       	push	r26
 998:	bf 93       	push	r27
 99a:	ef 93       	push	r30
 99c:	ff 93       	push	r31
	timer1_ctc_isr();
 99e:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <timer1_ctc_isr>
 9a2:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <timer1_ctc_isr+0x1>
 9a6:	09 95       	icall
}
 9a8:	ff 91       	pop	r31
 9aa:	ef 91       	pop	r30
 9ac:	bf 91       	pop	r27
 9ae:	af 91       	pop	r26
 9b0:	9f 91       	pop	r25
 9b2:	8f 91       	pop	r24
 9b4:	7f 91       	pop	r23
 9b6:	6f 91       	pop	r22
 9b8:	5f 91       	pop	r21
 9ba:	4f 91       	pop	r20
 9bc:	3f 91       	pop	r19
 9be:	2f 91       	pop	r18
 9c0:	0f 90       	pop	r0
 9c2:	0f be       	out	0x3f, r0	; 63
 9c4:	0f 90       	pop	r0
 9c6:	1f 90       	pop	r1
 9c8:	18 95       	reti

000009ca <__udivmodsi4>:
 9ca:	a1 e2       	ldi	r26, 0x21	; 33
 9cc:	1a 2e       	mov	r1, r26
 9ce:	aa 1b       	sub	r26, r26
 9d0:	bb 1b       	sub	r27, r27
 9d2:	fd 01       	movw	r30, r26
 9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <__udivmodsi4_ep>

000009d6 <__udivmodsi4_loop>:
 9d6:	aa 1f       	adc	r26, r26
 9d8:	bb 1f       	adc	r27, r27
 9da:	ee 1f       	adc	r30, r30
 9dc:	ff 1f       	adc	r31, r31
 9de:	a2 17       	cp	r26, r18
 9e0:	b3 07       	cpc	r27, r19
 9e2:	e4 07       	cpc	r30, r20
 9e4:	f5 07       	cpc	r31, r21
 9e6:	20 f0       	brcs	.+8      	; 0x9f0 <__udivmodsi4_ep>
 9e8:	a2 1b       	sub	r26, r18
 9ea:	b3 0b       	sbc	r27, r19
 9ec:	e4 0b       	sbc	r30, r20
 9ee:	f5 0b       	sbc	r31, r21

000009f0 <__udivmodsi4_ep>:
 9f0:	66 1f       	adc	r22, r22
 9f2:	77 1f       	adc	r23, r23
 9f4:	88 1f       	adc	r24, r24
 9f6:	99 1f       	adc	r25, r25
 9f8:	1a 94       	dec	r1
 9fa:	69 f7       	brne	.-38     	; 0x9d6 <__udivmodsi4_loop>
 9fc:	60 95       	com	r22
 9fe:	70 95       	com	r23
 a00:	80 95       	com	r24
 a02:	90 95       	com	r25
 a04:	9b 01       	movw	r18, r22
 a06:	ac 01       	movw	r20, r24
 a08:	bd 01       	movw	r22, r26
 a0a:	cf 01       	movw	r24, r30
 a0c:	08 95       	ret

00000a0e <_exit>:
 a0e:	f8 94       	cli

00000a10 <__stop_program>:
 a10:	ff cf       	rjmp	.-2      	; 0xa10 <__stop_program>
